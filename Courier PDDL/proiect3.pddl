;;2 masini merg in trip to romania. Scopul este sa ajunga 
;;la Cluj. Daca o masina a mers in toate directiile, atunci o poate 
;;opri politia pentru condus agresiv. Top 10 moduri de a lua amenda an ;;2021 @ UTCN.

(define (domain trip-to-romania)

  (:requirements :strips :action-costs)

  (:predicates
   (IS-CAR ?x)
   (IS-ROW ?x)
   (IS-COLUMN ?x)
   (NEXT-ROW ?r1 ?r2)
   (NEXT-COLUMN ?c1 ?c2)
   (car-at ?x ?r ?c)
   
   (is-package ?p)
   (has-package ?c ?p)
   (empty ?c)
   (package-at ?p ?row ?col)
   ;;(package-to ?p ?row ?col)

   (is-fined ?c)
   (is-speedster ?c)
   (is-fueled ?c)
   (has-eaten ?c)
   (rest-at ?row ?col)
   (camera-at ?row ?col)
   (gas-station ?row ?col)
   (moved-up ?c)
   (moved-down ?c)
   (moved-left ?c)
   (moved-right ?c)
  )

  (:functions
   (cost ?c) - number
   (total-cost) - number
  )

  (:action getPackage
   :parameters (?car ?p ?row ?col)
   :precondition (and (IS-CAR ?car)
                       (IS-ROW ?row)
                       (IS-COLUMN ?col)
                       (car-at ?car ?row ?col)
                       (is-package ?p)
                       (package-at ?p ?row ?col)
                       ;;(not (has-package ?car ?p))
                       (empty ?car)
                 )
   :effect (and (not (package-at ?p ?row ?col))
                (has-package ?car ?p)
                (not (empty ?car))
                (increase (total-cost) 20)
           )
  )

  (:action dropPackage
   :parameters (?car ?p ?row ?col)
   :precondition (and (IS-CAR ?car)
                       (IS-ROW ?row)
                       (IS-COLUMN ?col)
                       (car-at ?car ?row ?col)
                       (has-package ?car ?p)
                       (not (empty ?car))
                 )
   :effect (and (package-at ?p ?row ?col)
                (not (has-package ?car ?p))
                (empty ?car)
                (is-speedster ?car)
                (increase (total-cost) 20)
           )
  )
  
  (:action caughtOnCamera
    :parameters (?car ?row ?col)
    :precondition (and (IS-CAR ?car)
                       (IS-ROW ?row)
                       (IS-COLUMN ?col)
                       (car-at ?car ?row ?col)
                       (camera-at ?row ?col)
                       (not (is-fined ?car))
                       (is-speedster ?car)
                       (moved-up ?car)
                       (moved-down ?car)
                       (moved-left ?car)
                       (moved-right ?car)
                  )
    :effect (and (is-fined ?car)
                 (not (is-speedster ?car))
            )
  )
  
  (:action eatSomething
    :parameters (?car ?row ?col)
    :precondition (and (IS-CAR ?car)
                       (IS-ROW ?row)
                       (IS-COLUMN ?col)
                       (car-at ?car ?row ?col)
                       (rest-at ?row ?col)
                       (not (has-eaten ?car))
                  )
    :effect (and (has-eaten ?car)
                 (increase (total-cost) 0)
                 (not (rest-at ?row ?col))
            )
  )
  
  (:action fuelSomeGas
    :parameters (?car ?row ?col)
    :precondition (and (IS-CAR ?car)
                       (IS-ROW ?row)
                       (IS-COLUMN ?col)
                       (car-at ?car ?row ?col)
                       (gas-station ?row ?col)
                       (not (is-fueled ?car))  
                       (has-eaten ?car)
                       (not (empty ?car))
                  )
    :effect (and (is-fueled ?car)
                 (increase (total-cost) 0)
                 (not (gas-station ?row ?col))
            )
  )
  
  (:action move-down
    :parameters (?car ?old-row ?new-row ?col)
    :precondition (and (IS-CAR ?car)
                       (IS-ROW ?old-row)
                       (IS-ROW ?new-row)
                       (IS-COLUMN ?col)
                       (NEXT-ROW ?old-row ?new-row)
                       (car-at ?car ?old-row ?col)
                       (or (not (is-speedster ?car)) 
                           (not (camera-at ?old-row ?col))
                       )
                  )
    :effect (and (not (car-at ?car ?old-row ?col))
                 (car-at ?car ?new-row ?col)
                 (moved-down ?car)
                 (increase (total-cost) 20)
            )
  )

  (:action move-up
    :parameters (?car ?old-row ?new-row ?col)
    :precondition (and (IS-CAR ?car)
                       (IS-ROW ?old-row)
                       (IS-ROW ?new-row)
                       (IS-COLUMN ?col)
                       (NEXT-ROW ?new-row ?old-row)
                       (car-at ?car ?old-row ?col)
                       (or (not (is-speedster ?car)) 
                           (not (camera-at ?old-row ?col))
                       )
                  )
    :effect (and (not (car-at ?car ?old-row ?col))
                 (car-at ?car ?new-row ?col)
                 (moved-up ?car)
                 (increase (total-cost) 20)
                 ;;(increase (cost ?car) 20)
            )
  )

  (:action move-right
    :parameters (?car ?row ?old-col ?new-col)
    :precondition (and (IS-CAR ?car)
                       (IS-ROW ?row)
                       (IS-COLUMN ?old-col)
                       (IS-COLUMN ?new-col)
                       (NEXT-COLUMN ?old-col ?new-col)
                       (car-at ?car ?row ?old-col)
                       (or (not (is-speedster ?car)) 
                           (not (camera-at ?row ?old-col))
                       )
                  )
    :effect (and (not (car-at ?car ?row ?old-col))
                 (car-at ?car ?row ?new-col)
                 (moved-right ?car)
                 (increase (total-cost) 20)
            )
  )

  (:action move-left
    :parameters (?car ?row ?old-col ?new-col)
    :precondition (and (IS-CAR ?car)
                       (IS-ROW ?row)
                       (IS-COLUMN ?old-col)
                       (IS-COLUMN ?new-col)
                       (NEXT-COLUMN ?new-col ?old-col)
                       (car-at ?car ?row ?old-col)
                       (or (not (is-speedster ?car)) 
                           (not (camera-at ?row ?old-col))
                       )
                  )
    :effect (and (not (car-at ?car ?row ?old-col))
                 (car-at ?car ?row ?new-col)
                 (moved-left ?car)
                 (increase (total-cost) 20)
            )
  )

)
